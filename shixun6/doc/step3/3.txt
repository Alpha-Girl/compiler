任务描述
具体任务
注意事项
相关知识
符号表
语义检查
任务描述
本关任务：实现C1语言的语义检查器。本实训已经提供了实现语义检查器的基本架构，你需要在include/SyntaxTreeChecker.h和src/SyntaxTreeChecker.cpp这两个文件中完成语义检查器的功能实现。include/ErrorReporter.h和src/ErrorReporter.cpp是一个十分简陋的错误报告模块，主要用于报告输入的C1程序的错误和警告，你可以自由修改并实现自己的错误报告模块。

具体任务
实现C1的语义检查器，每个错误对应一个两位非0错误码。当输入的c1文件有错误时，检查器的返回值为非0值；程序正常或者只有警告时，返回0。

在test/user/ft_cases目录下面增加测试例子，你实现的每个错误都需要有一个对应的错误例子，例子的名称前缀为两位的错误码，格式为xx_name.c1，xx为错误码，如03，name为自定义名称。

在doc/step3/answer.md里面介绍你的具体设计以及核心代码实现、实验中遇到的困难以及解决方案、对实验的吐槽以及建议。

在doc/step3/error.csv里面，每行一个包含一个错误码、错误信息、例子路径（格式为xx_name.c1），以逗号分隔。比如文件内容如下：

03, identifier xxx is undefined, 04_undefined.c1
04, xxx, 04_xxx.c1
请保证该文件的存在以及格式正确，助教会使用脚本自动化收集相关信息。

注意事项
在本关任务中，你可以修改所有的文件但需要保持目录结构不变。助教使用脚本半自动进行评测，所以可以增加文件或修改文件内容，但不能移动或删除文件，也不能改变编译生成的文件名称和路径。助教会在build目录下面编译，并在该目录下使用以下命令运行程序：./c1checker path/to/test.c1，其中path/to/test.c1为输入的测试文件路径。

本关任务不设置错误输出信息的输出格式（感兴趣的同学可以参考GCC或者Clang等编译器的错误输出），但你的错误输出需要让助教能够理解。

语义检查器的错误处理也没有限制，你可以选择在错误的地方直接退出还是参考现有编译器的错误处理。

没有其他想法的同学可以只实现 相关知识–语义检查 里涉及的错误。

注意：第6关会检查很多的测试例子。

相关知识
符号表
本实训项目已经提供了一个基本的符号表实现，在include/SyntaxTreeChecker.h，你可以选择这个提供的实现，也可以自己实现。

语义检查
1. 类型检查

C1 语言的类型共七种：函数、常量整型、变量整型、变量整型数组、常量浮点型、变量浮点型、变量浮点型数组。类型检查发生在函数调用、赋值、左值取值时。根据各类型的语义，你需要处理类型错误，具体来说：

被调用的函数或变量不存在；

赋值语句中的左值所引用的量为常量；

左值表达式中进行索引时，被索引的值不是数组，或者索引不是整型，或者索引的维度超出数组声明的维度。

数组越界（运行时，数组索引是常量表达式的都需要进行检查。另外，多维数组的其中一个维度越界也需要检查,也包括初始化列表过长的情况）

返回值检查。注意，C1和C类似，非void的函数没有return语句的默认返回一个未定义的值，void函数可以没有return语句。

整型和浮点型表达式的算术运算、赋值的规则与 C 语言类似。例如：

整型和浮点型之间进行算术运算，要将整型数转换成浮点型数之后再进行运算；

整型和浮点型之间赋值，要按赋值号左边的运算对象的类型对赋值号右边的结果进行类型转换，再进行赋值。

在进行类型转换时，注意函数调用以及常量声明赋值只能是常量表达式。

2. 名称重复检查

在遇到函数或变量声明时，你需要检查所声明的函数或变量在当前作用域内是否有重名的函数或变量。

函数的名称冲突通过维护functions来检查；

变量的名称冲突通过检查declare_variable返回值来检查。若为真，则声明成功，无冲突，否则发生冲突。

由于 C1 语言分别处理函数和变量，你可以不考虑函数、变量之间的名称冲突。

3. 未使用变量检查

如果一个变量没有被使用，可以报告警告信息（可选）。

4. 其他检查

程序中没有main函数或者main函数声明的返回值为空或者float。
你还可以进行其他的检查，输出相应的报错或者警告信息。

开始你的任务吧，祝你成功！